[build-system]
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "aiida-project"
dynamic = ["version"]
description = "An AiiDA environment manager"
authors = [{name = "The AiiDA team", email = "developers@aiida.net"}]
readme = "README.md"
license = {file = "LICENSE.txt"}
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Framework :: AiiDA",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering"
]
keywords = ["aiida", "workflows"]
requires-python = ">=3.9"
dependencies = [
  "pydantic~=2.7",
  "pydantic-settings~=2.2",
  "python-dotenv~=1.0",
  "typer[all]~=0.9",
  "pyyaml~=6.0",
  'eval-type-backport; python_version<"3.10"',
]

[project.urls]
Source = "https://github.com/aiidateam/aiida-project"

[project.scripts]
aiida-project = "aiida_project.commands.main:app"

[project.optional-dependencies]
dev = [
  "pre-commit>=3.4",
  "mypy~=1.18.1",
  "types-pyyaml~=6.0",
]

[dependency-groups]
dev = [
    "aiida-project[dev]",
]

[tool.mypy]
plugins = ['pydantic.mypy']

[tool.ruff]
line-length = 100

[tool.ruff.lint]
ignore = [
  'PLR0912',  # Too many branches
  'PLW2901',  # `for` loop variable overwritten by assignment target
  'PLW1510',  # `subprocess.run` without explicit `check` argument
  'RUF012',   # Mutable class attributes should be annotated with `typing.ClassVar`
  'PLC0415',  # `import` should be at the top-level of a file
  'UP045',    # Use `X | None` for type annotations
  'UP006',    # Use `list` instead of `List` for type annotation
  'UP007',    # Use `X | Y` for type annotations
]

select = [
  'E',  # pydocstyle
  'W',  # pydocstyle
  'F',  # pyflakes
  'I',  # isort
  'N',  # pep8-naming
  'UP',   # pyupgrade
  'PLC',  # pylint-convention
  'PLE',  # pylint-error
  'PLR',  # pylint-refactor
  'PLW',  # pylint-warning
  'RUF',  # ruff
]
